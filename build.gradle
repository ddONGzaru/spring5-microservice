buildscript {
	ext {
		springBootVersion = '2.0.0.RC2'
	}
	repositories {
		maven { url 'https://plugins.gradle.org/m2/' }
		maven { url 'http://repo.spring.io/milestone/' }
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("gradle.plugin.com.boxfuse.client:flyway-release:4.2.0")
		classpath("io.franzbecker:gradle-lombok:1.10")
	}
}

//root 프로젝트까지 적용하고 싶다면 allprojects로 등록
subprojects {

	apply plugin: 'java'
	apply plugin: 'groovy'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.flywaydb.flyway'
	apply plugin: 'io.franzbecker.gradle-lombok'

	idea {
		module {
			outputDir file('build/classes/main')
			testOutputDir file('build/classes/test')
		}
	}

	if(project.convention.findPlugin(JavaPluginConvention)) {
		// Change the output directory for the main and test source sets back to the old path
		sourceSets.main.output.classesDir = new File(buildDir, "classes/main")
		sourceSets.test.output.classesDir = new File(buildDir, "classes/test")
	}

	/* _____ repo config _____ */
	repositories {
		maven {
			url "${NEXUS_URL}/repository/maven-public/"
			credentials {
				username NEXUS_ID
				password NEXUS_PASSWORD
			}
		}
		maven { url 'http://repo.spring.io/milestone/' }
		jcenter()
		mavenCentral()
	}

	/* _____ compiler config _____ */
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	compileJava.dependsOn(processResources)

	compileGroovy {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

	/* _____ encoding config _____ */
	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
	[compileGroovy, compileTestGroovy]*.options*.encoding = 'UTF-8'
	[compileGroovy, compileTestGroovy]*.groovyOptions*.encoding = 'UTF-8'


	/* _____ sourceSets config _____ */
	sourceSets {
		test.groovy.srcDirs = ['src/test/groovy']

		main.output.resourcesDir = sourceSets.main.output.classesDir
		test.output.resourcesDir = sourceSets.test.output.classesDir
	}

	/*configurations {
		compile.exclude module: 'slf4j-log4j12'
		compile.exclude module: 'tomcat-jdbc'
		compile.exclude module: 'persistence-api'
	}*/

	javadoc {
		options.encoding = 'UTF-8'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.4.1'
}

task showRepos {
	doLast {
		println "All repos:"
		println repositories.collect { it.name }
	}
}